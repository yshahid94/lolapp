/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.7.0.0 (NJsonSchema v10.1.24.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

export class IConfig {
    constructor(token: string) {
        this.authToken = token;
    }

    authToken: string;
}

export class ApiClientBase {
    private readonly config: IConfig;

    protected constructor(config: IConfig) {
        this.config = config;
    }

    protected transformOptions = (options: RequestInit): Promise<RequestInit> => {
        options.headers = {
            ...options.headers,
            Authorization: "Bearer " + this.config.authToken
        };
        return Promise.resolve(options);
    };
}

export class Client extends ApiClientBase {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(configuration: IConfig, baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super(configuration);
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @param username (optional) 
     * @return Success
     */
    getSummoner(username: string | undefined): Promise<SummonerApiResponse> {
        let url_ = this.baseUrl + "/Summoner/getSummoner?";
        if (username === null)
            throw new Error("The parameter 'username' cannot be null.");
        else if (username !== undefined)
            url_ += "username=" + encodeURIComponent("" + username) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetSummoner(_response);
        });
    }

    protected processGetSummoner(response: Response): Promise<SummonerApiResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SummonerApiResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SummonerApiResponse>(<any>null);
    }

    /**
     * @return Success
     */
    getAllSummoners(): Promise<SummonerListApiResponse> {
        let url_ = this.baseUrl + "/Summoner/getAllSummoners";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetAllSummoners(_response);
        });
    }

    protected processGetAllSummoners(response: Response): Promise<SummonerListApiResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SummonerListApiResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SummonerListApiResponse>(<any>null);
    }

    /**
     * @return Success
     */
    getAllSummonersLeagues(): Promise<SummonerLeaguesListApiResponse> {
        let url_ = this.baseUrl + "/Summoner/getAllSummonersLeagues";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetAllSummonersLeagues(_response);
        });
    }

    protected processGetAllSummonersLeagues(response: Response): Promise<SummonerLeaguesListApiResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SummonerLeaguesListApiResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SummonerLeaguesListApiResponse>(<any>null);
    }

    /**
     * @param returnHistoricLeagues (optional) 
     * @return Success
     */
    updateAllSummonersLeagues(returnHistoricLeagues: boolean | undefined): Promise<SummonerLeaguesListApiResponse> {
        let url_ = this.baseUrl + "/Summoner/updateAllSummonersLeagues?";
        if (returnHistoricLeagues === null)
            throw new Error("The parameter 'returnHistoricLeagues' cannot be null.");
        else if (returnHistoricLeagues !== undefined)
            url_ += "returnHistoricLeagues=" + encodeURIComponent("" + returnHistoricLeagues) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processUpdateAllSummonersLeagues(_response);
        });
    }

    protected processUpdateAllSummonersLeagues(response: Response): Promise<SummonerLeaguesListApiResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SummonerLeaguesListApiResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SummonerLeaguesListApiResponse>(<any>null);
    }
}

export class League implements ILeague {
    id?: string | undefined;
    createdAt?: Date;
    updatedOn?: Date;
    leagueID?: string | undefined;
    queueType?: QueueType;
    tier?: Tier;
    rank?: Rank;
    summonerID?: string | undefined;
    summonerName?: string | undefined;
    leaguePoints?: number;
    wins?: number;
    losses?: number;

    constructor(data?: ILeague) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.updatedOn = _data["updatedOn"] ? new Date(_data["updatedOn"].toString()) : <any>undefined;
            this.leagueID = _data["leagueID"];
            this.queueType = _data["queueType"];
            this.tier = _data["tier"];
            this.rank = _data["rank"];
            this.summonerID = _data["summonerID"];
            this.summonerName = _data["summonerName"];
            this.leaguePoints = _data["leaguePoints"];
            this.wins = _data["wins"];
            this.losses = _data["losses"];
        }
    }

    static fromJS(data: any): League {
        data = typeof data === 'object' ? data : {};
        let result = new League();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["updatedOn"] = this.updatedOn ? this.updatedOn.toISOString() : <any>undefined;
        data["leagueID"] = this.leagueID;
        data["queueType"] = this.queueType;
        data["tier"] = this.tier;
        data["rank"] = this.rank;
        data["summonerID"] = this.summonerID;
        data["summonerName"] = this.summonerName;
        data["leaguePoints"] = this.leaguePoints;
        data["wins"] = this.wins;
        data["losses"] = this.losses;
        return data; 
    }
}

export interface ILeague {
    id?: string | undefined;
    createdAt?: Date;
    updatedOn?: Date;
    leagueID?: string | undefined;
    queueType?: QueueType;
    tier?: Tier;
    rank?: Rank;
    summonerID?: string | undefined;
    summonerName?: string | undefined;
    leaguePoints?: number;
    wins?: number;
    losses?: number;
}

export enum QueueType {
    _0 = 0,
    _1 = 1,
    _2 = 2,
}

export enum Rank {
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
    _5 = 5,
}

export class Summoner implements ISummoner {
    id?: string | undefined;
    createdAt?: Date;
    updatedOn?: Date;
    summonerID?: string | undefined;
    accountID?: string | undefined;
    puuid?: string | undefined;
    name?: string | undefined;
    profileIconID?: number;
    revisionDate?: Date;
    summonerLevel?: number;

    constructor(data?: ISummoner) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.updatedOn = _data["updatedOn"] ? new Date(_data["updatedOn"].toString()) : <any>undefined;
            this.summonerID = _data["summonerID"];
            this.accountID = _data["accountID"];
            this.puuid = _data["puuid"];
            this.name = _data["name"];
            this.profileIconID = _data["profileIconID"];
            this.revisionDate = _data["revisionDate"] ? new Date(_data["revisionDate"].toString()) : <any>undefined;
            this.summonerLevel = _data["summonerLevel"];
        }
    }

    static fromJS(data: any): Summoner {
        data = typeof data === 'object' ? data : {};
        let result = new Summoner();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["updatedOn"] = this.updatedOn ? this.updatedOn.toISOString() : <any>undefined;
        data["summonerID"] = this.summonerID;
        data["accountID"] = this.accountID;
        data["puuid"] = this.puuid;
        data["name"] = this.name;
        data["profileIconID"] = this.profileIconID;
        data["revisionDate"] = this.revisionDate ? this.revisionDate.toISOString() : <any>undefined;
        data["summonerLevel"] = this.summonerLevel;
        return data; 
    }
}

export interface ISummoner {
    id?: string | undefined;
    createdAt?: Date;
    updatedOn?: Date;
    summonerID?: string | undefined;
    accountID?: string | undefined;
    puuid?: string | undefined;
    name?: string | undefined;
    profileIconID?: number;
    revisionDate?: Date;
    summonerLevel?: number;
}

export class SummonerApiResponse implements ISummonerApiResponse {
    httpStatusCode?: number;
    message?: string | undefined;
    itemCount?: number;
    result?: Summoner;

    constructor(data?: ISummonerApiResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.httpStatusCode = _data["httpStatusCode"];
            this.message = _data["message"];
            this.itemCount = _data["itemCount"];
            this.result = _data["result"] ? Summoner.fromJS(_data["result"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SummonerApiResponse {
        data = typeof data === 'object' ? data : {};
        let result = new SummonerApiResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["httpStatusCode"] = this.httpStatusCode;
        data["message"] = this.message;
        data["itemCount"] = this.itemCount;
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ISummonerApiResponse {
    httpStatusCode?: number;
    message?: string | undefined;
    itemCount?: number;
    result?: Summoner;
}

export class SummonerLeagues implements ISummonerLeagues {
    summoner?: Summoner;
    historicLeagues?: League[] | undefined;

    constructor(data?: ISummonerLeagues) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.summoner = _data["summoner"] ? Summoner.fromJS(_data["summoner"]) : <any>undefined;
            if (Array.isArray(_data["historicLeagues"])) {
                this.historicLeagues = [] as any;
                for (let item of _data["historicLeagues"])
                    this.historicLeagues!.push(League.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SummonerLeagues {
        data = typeof data === 'object' ? data : {};
        let result = new SummonerLeagues();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["summoner"] = this.summoner ? this.summoner.toJSON() : <any>undefined;
        if (Array.isArray(this.historicLeagues)) {
            data["historicLeagues"] = [];
            for (let item of this.historicLeagues)
                data["historicLeagues"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ISummonerLeagues {
    summoner?: Summoner;
    historicLeagues?: League[] | undefined;
}

export class SummonerLeaguesListApiResponse implements ISummonerLeaguesListApiResponse {
    httpStatusCode?: number;
    message?: string | undefined;
    itemCount?: number;
    result?: SummonerLeagues[] | undefined;

    constructor(data?: ISummonerLeaguesListApiResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.httpStatusCode = _data["httpStatusCode"];
            this.message = _data["message"];
            this.itemCount = _data["itemCount"];
            if (Array.isArray(_data["result"])) {
                this.result = [] as any;
                for (let item of _data["result"])
                    this.result!.push(SummonerLeagues.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SummonerLeaguesListApiResponse {
        data = typeof data === 'object' ? data : {};
        let result = new SummonerLeaguesListApiResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["httpStatusCode"] = this.httpStatusCode;
        data["message"] = this.message;
        data["itemCount"] = this.itemCount;
        if (Array.isArray(this.result)) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ISummonerLeaguesListApiResponse {
    httpStatusCode?: number;
    message?: string | undefined;
    itemCount?: number;
    result?: SummonerLeagues[] | undefined;
}

export class SummonerListApiResponse implements ISummonerListApiResponse {
    httpStatusCode?: number;
    message?: string | undefined;
    itemCount?: number;
    result?: Summoner[] | undefined;

    constructor(data?: ISummonerListApiResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.httpStatusCode = _data["httpStatusCode"];
            this.message = _data["message"];
            this.itemCount = _data["itemCount"];
            if (Array.isArray(_data["result"])) {
                this.result = [] as any;
                for (let item of _data["result"])
                    this.result!.push(Summoner.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SummonerListApiResponse {
        data = typeof data === 'object' ? data : {};
        let result = new SummonerListApiResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["httpStatusCode"] = this.httpStatusCode;
        data["message"] = this.message;
        data["itemCount"] = this.itemCount;
        if (Array.isArray(this.result)) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ISummonerListApiResponse {
    httpStatusCode?: number;
    message?: string | undefined;
    itemCount?: number;
    result?: Summoner[] | undefined;
}

export enum Tier {
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
    _5 = 5,
    _6 = 6,
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}